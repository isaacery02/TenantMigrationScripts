##### Backup Storage Account Backup Configurations #####
#!/bin/bash

# Set variables
SUBSCRIPTION_ID="6e455061-8c2e-4d6c-9b38-b1fee092ae86"
OUTPUT_FILE="/mnt/c/temp/AzureStorageBackupSettingsBackup/storage-backup.csv"


# Ensure Azure CLI is logged in
az account set --subscription "$SUBSCRIPTION_ID"

# Create CSV with headers
echo "StorageAccountName,FileShareName,FriendlyName,ResourceId,VaultName,PolicyName,PolicyId" > "$OUTPUT_FILE"

# Get all Resource Groups
RESOURCE_GROUPS=$(az group list --query "[].name" -o tsv)

# Loop through each Resource Group
for RESOURCE_GROUP in $RESOURCE_GROUPS; do
    echo "🔍 Checking Resource Group: $RESOURCE_GROUP"

    # Get all Recovery Services Vaults in the Resource Group
    VAULTS=$(az backup vault list --resource-group "$RESOURCE_GROUP" --query "[].name" -o tsv 2>/dev/null)

    if [[ -z "$VAULTS" ]]; then
        echo "⚠ No vaults found in RG: $RESOURCE_GROUP. Skipping..."
        continue
    fi

    # Loop through each vault in the resource group
    for VAULT in $VAULTS; do
        echo "🔍 Checking Recovery Services Vault: $VAULT in RG: $RESOURCE_GROUP"

        # Get all Azure File Share backups
        BACKUP_ITEMS=$(az backup item list --vault-name "$VAULT" --resource-group "$RESOURCE_GROUP" --query "[?properties.workloadType=='AzureFileShare']" -o json 2>/dev/null)

        # Check if backup items exist
        BACKUP_COUNT=$(echo "$BACKUP_ITEMS" | jq length)
        if [[ -z "$BACKUP_ITEMS" || "$BACKUP_COUNT" -eq 0 ]]; then
            echo "⚠ No Azure File Share backups found in $VAULT. Skipping..."
            continue
        fi

        # Process each backup item
        echo "$BACKUP_ITEMS" | jq -c '.[]' | while read -r ITEM; do
            # Extract Storage Account Name from `sourceResourceId`
            STORAGE_ACCOUNT=$(echo "$ITEM" | jq -r '.properties.sourceResourceId' | awk -F'/' '{print $(NF)}')

            # Extract File Share Name from `friendlyName`
            FILE_SHARE_NAME=$(echo "$ITEM" | jq -r '.properties.friendlyName')

            # Extract Resource ID
            RESOURCE_ID=$(echo "$ITEM" | jq -r '.properties.sourceResourceId')

            # Get Backup Policy Info
            POLICY_NAME=$(echo "$ITEM" | jq -r '.properties.policyName // "Unknown"')
            POLICY_ID=$(echo "$ITEM" | jq -r '.properties.policyId // "Unknown"')

            # Ensure values are valid before appending to CSV
            if [[ -n "$STORAGE_ACCOUNT" && -n "$FILE_SHARE_NAME" && -n "$RESOURCE_ID" ]]; then
                echo "📌 Saving backup configuration: Storage Account: $STORAGE_ACCOUNT, File Share: $FILE_SHARE_NAME"
                echo "$STORAGE_ACCOUNT,$FILE_SHARE_NAME,$FILE_SHARE_NAME,$RESOURCE_ID,$VAULT,$POLICY_NAME,$POLICY_ID" >> "$OUTPUT_FILE"
            else
                echo "⚠ Skipping invalid backup entry (missing values)"
            fi
        done
    done
done

echo "✅ Backup configuration exported to: $OUTPUT_FILE"
